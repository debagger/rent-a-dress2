import { Store, GetterTree, MutationTree, ActionTree } from 'vuex';
import { NuxtStoreInput, MergedStoreType, BlankStore } from './types/store';
import { StateType } from './types/state';
export declare const getAccessorType: <T extends Record<string, any>, G extends GetterTree<StateType<T>, any>, M extends MutationTree<StateType<T>>, A extends ActionTree<StateType<T>, any>, S extends Record<string, Partial<import("./types/store").NuxtStore>>>(store: Partial<NuxtStoreInput<T, G, M, A, S>>) => MergedStoreType<Partial<NuxtStoreInput<T, G, M, A, S>> & BlankStore, string>;
export declare const useAccessor: <T extends Record<string, any>, G extends GetterTree<StateType<T>, any>, M extends MutationTree<StateType<T>>, A extends ActionTree<StateType<T>, any>, S extends Record<string, Partial<import("./types/store").NuxtStore>>>(store: Store<any>, input: Partial<NuxtStoreInput<T, G, M, A, S>>, namespace?: string | undefined) => MergedStoreType<Partial<NuxtStoreInput<T, G, M, A, S>> & BlankStore, string>;
export declare const getAccessorFromStore: (pattern: any) => (store: Store<any>) => MergedStoreType<Partial<NuxtStoreInput<Record<string, any>, GetterTree<Record<string, any>, any>, MutationTree<Record<string, any>>, ActionTree<Record<string, any>, any>, Record<string, Partial<import("./types/store").NuxtStore>>>> & BlankStore, string>;
