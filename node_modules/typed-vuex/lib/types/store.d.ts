import { Store } from 'vuex';
import { State, StateType } from './state';
import { GettersTransformer } from './getters';
import { MutationsTransformer } from './mutations';
import { ActionTransformer, ActionContext, RootStateHelper, RootGettersHelper } from './actions';
import { NuxtModules, ModuleTransformer } from './modules';
export interface BlankStore {
    state: {};
    getters: {};
    mutations: {};
    actions: {};
    modules: {};
}
export interface NuxtStore {
    state: State;
    getters: Record<string, any>;
    mutations: Record<string, any>;
    actions: Record<string, any>;
    modules: NuxtModules;
}
export interface NuxtStoreInput<T extends State, G, M, A, S extends {
    [key: string]: Partial<NuxtStore>;
}> {
    namespaced?: boolean;
    state: T;
    getters?: G;
    mutations?: M;
    actions?: A;
    modules?: S;
}
export declare type MergedStoreType<T extends NuxtStore, K = string> = ('state' extends K ? StateType<T['state']> : {}) & ('getters' extends K ? GettersTransformer<T['getters']> : {}) & ('mutations' extends K ? MutationsTransformer<T['mutations']> : {}) & ('actions' extends K ? ActionTransformer<T['actions']> : {}) & ('modules' extends K ? ModuleTransformer<T['modules']> : {});
export declare const getStoreType: <T extends Record<string, any>, G, M, A, S extends Record<string, Partial<NuxtStore>>>(store: NuxtStoreInput<T, G, M, A, S>) => {
    actionContext: ActionContext<NuxtStoreInput<T, G, M, A, S> & BlankStore>;
    rootState: RootStateHelper<NuxtStoreInput<T, G, M, A, S> & BlankStore>;
    rootGetters: RootGettersHelper<NuxtStoreInput<T, G, M, A, S> & BlankStore>;
    storeInstance: ActionContext<NuxtStoreInput<T, G, M, A, S> & BlankStore> & Store<StateType<T>>;
};
