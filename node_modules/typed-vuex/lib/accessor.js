export const getAccessorType = (store) => {
    return {};
};
const getNestedState = (parent, namespaces) => {
    if (!parent[namespaces[0]]) {
        return parent;
    }
    else {
        return getNestedState(parent[namespaces[0]], namespaces.slice(1));
    }
};
const createAccessor = (store, { getters, state, mutations, actions, namespaced, }, namespace = '') => {
    const namespacedPath = namespace && namespaced ? `${namespace}/` : '';
    const accessor = {};
    Object.keys(getters || {}).forEach(getter => {
        Object.defineProperty(accessor, getter, {
            get: () => store.getters[`${namespacedPath}${getter}`],
        });
    });
    const evaluatedState = state
        ? typeof state === 'function'
            ? state()
            : state
        : {};
    Object.keys(evaluatedState).forEach(prop => {
        if (!Object.getOwnPropertyNames(accessor).includes(prop)) {
            const namespaces = namespace.split('/');
            const state = getNestedState(store.state, namespaces);
            Object.defineProperty(accessor, prop, {
                get: () => state[prop],
            });
        }
    });
    Object.keys(mutations || {}).forEach(mutation => {
        accessor[mutation] = (mutationPayload) => store.commit(`${namespacedPath}${mutation}`, mutationPayload);
    });
    Object.keys(actions || {}).forEach(action => {
        accessor[action] = (actionPayload) => store.dispatch(`${namespacedPath}${action}`, actionPayload);
    });
    return accessor;
};
export const useAccessor = (store, input, namespace) => {
    const accessor = createAccessor(store, input, namespace);
    Object.keys(input.modules || {}).forEach(moduleNamespace => {
        const nestedNamespace = namespace
            ? `${namespace}/${moduleNamespace}`
            : moduleNamespace;
        accessor[moduleNamespace] = useAccessor(store, input.modules[moduleNamespace], nestedNamespace);
    });
    const storeType = getAccessorType(input);
    return accessor;
};
export const getAccessorFromStore = (pattern) => {
    return (store) => useAccessor(store, pattern._modules.root._rawModule);
};
//# sourceMappingURL=accessor.js.map